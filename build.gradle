import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.Collectors

plugins {
    id("maven-publish")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id 'fabric-loom' version "0.11-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

version = '18.1-fabric'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'LimitMobSpawn'

println('Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') +
        '(' + System.getProperty('java.vendor') + ') ' +
        'Arch: ' + System.getProperty('os.arch'))

loom {
    runs {
        client {
            name "Client"
            runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER") ?: "false") ? "run-server" : "run"
            programArgs(List.of("--username", "Kotori"))
        }
        server {
            name "Server"
            runDir = "run-server"
        }
        data {
            client()
            name "Data Generation"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/test/resources")}"
            //noinspection SpellCheckingInspection
            vmArg "-Dfabric-api.datagen.strict-validation"

            ideConfigGenerated = true
            runDir("run-server")
        }
    }
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
}

java {
    withSourcesJar()
    toolchain {
        it.languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // Test Dependencies.
    final String JUPITER_VERSION = '5.6.2'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

test {
    useJUnitPlatform()
    int cpus = Runtime.getRuntime().availableProcessors()
    printf("CPU: %d, Memory: %fMB%n", cpus, Runtime.getRuntime().totalMemory() / Math.pow(2, 20))
    // setMaxParallelForks(cpus > 1 ? cpus - 1 : 1)
    systemProperty('limit_mob_spawn_data_gen', 'true')
    testLogging {
        events "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        // exceptionFormat 'full' // No need because we can get test report html.
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
def jarAttributeMap = [
        "Specification-Title"     : "limitmobspawn",
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name as String,
        "Implementation-Version"  : project.version as String,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        'Automatic-Module-Name'   : 'limitmobspawn',
]
jar {
    from "LICENSE"
    manifest {
        attributes(jarAttributeMap)
    }
}

static def BRANCH() { return "1.18-fabric" }

curseforge {
    String v = project.fabric_version
    String minecraftVersion = project.minecraft_version
    final File file = file("changelog.md")
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: ""
    project {
        id = '449932'
        changelogType = 'markdown'
        changelog = file.exists() ? file.text : "See https://github.com/Kotori316/LimitMobSpawn-fabric/commits/${BRANCH()} for change log." + System.lineSeparator() * 2 +
                "For Minecraft $minecraftVersion, built with $v"
        releaseType = 'beta'
        addGameVersion '1.18.1'
        addGameVersion 'Fabric'
        mainArtifact remapJar
        addArtifact jar
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "LimitMobSpawn"
            from components.java
            pom {
                String v = project.fabric_version
                String minecraftVersion = project.minecraft_version
                name = archivesBaseName
                description = "LimitMobSpawn for Minecraft $minecraftVersion, build with Fabric $v"
                url = 'https://github.com/Kotori316/LimitMobSpawn-fabric'
                packaging = "jar"
                withXml {
                    (asNode() as Node).dependencies.'*'.findAll() { Node node ->
                        node.parent().remove(node)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
}

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(remapJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

task checkCompileOption() {
    doLast {
        List<String> strings = new ArrayList<>()
        strings.add("archivesBaseName: $archivesBaseName")
        strings.add("group: $group")
        strings.add("BRANCH: ${BRANCH()}")
        strings.add("project.group: ${project.group}")
        strings.add("version: $version")
        strings.add("Display name: ${"v" + project.version + " [${project.minecraft_version}]"}")
        strings.add("runs: ${loom.getRunConfigs().asMap.toMapString()}")
        strings.add("Absolute Client RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("client").runDir).toAbsolutePath()}")
        strings.add("Absolute Server RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("server").runDir).toAbsolutePath()}")
        strings.add("-" * 20)
        strings.add("Jar: ${jar.getArchiveFile().get()}")
        strings.add("Source Jar: ${sourcesJar.getArchiveFile().get()}")
        strings.add("Remap Jar ${remapJar.getArchiveFile().get()}")
        strings.add("RemapSource Jar ${remapSourcesJar.getArchiveFile().get()}")
        strings.add("%s: %s".formatted(jar.getArchiveFile().get().asFile.parentFile, Arrays.toString(jar.getArchiveFile().get().asFile.parentFile.list())))
        strings.add("%s: %s".formatted(remapJar.getArchiveFile().get().asFile.parentFile, Arrays.toString(remapJar.getArchiveFile().get().asFile.parentFile.list())))
        strings.add("-" * 20)
        strings.add("Now: " + ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT))
        strings.add("Now in Japan: " + ZonedDateTime.now().withZoneSameInstant(ZoneId.of("Asia/Tokyo")).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
        strings.add("-" * 20)
        strings.add("Repositories")
        for (def r : project.getRepositories()) {
            strings.add("${r.name} $r ${r instanceof MavenArtifactRepository ? r.getUrl() : "Not maven " + r.getClass()}")
        }

        System.out.println(strings.stream().collect(Collectors.joining(System.lineSeparator())))
        System.out.println("*" * 20 as String)
        System.out.println("ChangeLog")
        def f = file("changelog.md")
        System.out.println(f.exists() ? f.text : "No changelog")
    }
}
